import React, { useState, useEffect } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { logoutUser } from '../services/authService';
import './Navbar.css'; // Import Navbar.css

function Navbar() {
  // Get auth context for user information
  const { currentUser, isAdmin, logout } = useAuth();
  const isAuthenticated = !!currentUser;
  const userRole = currentUser?.role || (isAdmin ? 'admin' : 'user');
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isVendorMenuOpen, setIsVendorMenuOpen] = useState(false);
  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    setIsMenuOpen(false);
    setIsVendorMenuOpen(false);
    setIsUserMenuOpen(false);
  }, [location.pathname]);

  // Add scroll effect for better UX
  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 50) {
        setIsScrolled(true);
      } else {
        setIsScrolled(false);
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const toggleMenu = (e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    const willOpen = !isMenuOpen;
    setIsMenuOpen(willOpen);
    document.body.style.overflow = willOpen ? 'hidden' : 'auto';
  };
  
  // Handle menu open/close with overlay
  useEffect(() => {
    const overlay = document.querySelector('.navbar-overlay');
    if (!overlay) return;
    
    if (isMenuOpen) {
      overlay.style.display = 'block';
      setTimeout(() => {
        overlay.style.opacity = '1';
        overlay.style.visibility = 'visible';
      }, 10);
    } else {
      overlay.style.opacity = '0';
      overlay.style.visibility = 'hidden';
      setTimeout(() => {
        overlay.style.display = 'none';
      }, 300);
    }
  }, [isMenuOpen]);

  // Close mobile menu when clicking outside or on overlay
  useEffect(() => {
    if (!isMenuOpen) return;
    
    const handleClick = (e) => {
      const menu = document.querySelector('.navbar-links-container');
      const toggle = document.querySelector('.navbar-mobile-toggle');
      const overlay = document.querySelector('.navbar-overlay');
      
      if ((menu && !menu.contains(e.target) && toggle && !toggle.contains(e.target)) || 
         (overlay && overlay.contains(e.target))) {
        setIsMenuOpen(false);
        document.body.style.overflow = 'auto';
      }
    };
    
    document.addEventListener('click', handleClick);
    return () => document.removeEventListener('click', handleClick);
  }, [isMenuOpen]);

  // Handle link clicks in mobile menu
  const handleMobileLinkClick = (e) => {
    // Check if clicked element is a link or inside a link
    const linkElement = e.target.closest('a');
    if (linkElement) {
      // Close the menu after a slight delay to allow navigation
      setTimeout(() => {
        setIsMenuOpen(false);
        document.body.style.overflow = 'auto';
      }, 50);
    }
  };

  const toggleVendorMenu = (e) => {
    if (e) {
      e.stopPropagation();
      e.preventDefault();
    }
    setIsVendorMenuOpen(prev => !prev);
    setIsUserMenuOpen(false);
  };

  const toggleUserMenu = (e) => {
    e.stopPropagation(); // Prevent event bubbling
    setIsUserMenuOpen(!isUserMenuOpen);
    setIsVendorMenuOpen(false); // Close vendor menu when user menu is toggled
  };

  const handleLogoutClick = async () => {
    try {
      await logoutUser();
      // Clear any stored vendor or user info from localStorage
      localStorage.removeItem('vendorInfo');
      localStorage.removeItem('userInfo');
      
      navigate('/');
      setIsMenuOpen(false);
      setIsUserMenuOpen(false);
      console.log('User logged out successfully');
    } catch (error) {
      console.error('Logout failed:', error);
    }
  };
  
  // Close menus when clicking outside
  useEffect(() => {
    const handleClickOutside = () => {
      setIsVendorMenuOpen(false);
      setIsUserMenuOpen(false);
      setIsMenuOpen(false);
    };
    
    document.addEventListener('click', handleClickOutside);
    return () => document.removeEventListener('click', handleClickOutside);
  }, []);

  const getLinkClass = (path) => {
    return location.pathname === path ? 'active' : '';
  };

  // Close mobile menu when route changes
  useEffect(() => {
    const unlisten = () => {
      setIsMenuOpen(false);
      document.body.style.overflow = 'auto';
    };
    
    // Listen for route changes
    window.addEventListener('popstate', unlisten);
    
    return () => {
      window.removeEventListener('popstate', unlisten);
    };
  }, []);
  
  // Toggle body scroll when menu is open/closed
  useEffect(() => {
    document.body.style.overflow = isMenuOpen ? 'hidden' : 'auto';
    
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, [isMenuOpen]);

  // Close mobile menu when route changes
  useEffect(() => {
    setIsMenuOpen(false);
  }, [location.pathname]);

  return (
    <>
      <nav className={`navbar ${isScrolled ? 'scrolled' : ''}`}>
        <div className="navbar-container">
        <Link to="/" className="navbar-logo" onClick={() => setIsMenuOpen(false)}>
          <div className="logo-container">
            <span className="logo-icon">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path>
                <polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline>
                <line x1="12" y1="22.08" x2="12" y2="12"></line>
              </svg>
            </span>
            <span className="logo-text">Travelita</span>
          </div>
        </Link>

        {/* Mobile Menu Toggle Button */}
        <button 
          className={`navbar-mobile-toggle ${isMenuOpen ? 'open' : ''}`} 
          onClick={toggleMenu}
          aria-label="Toggle menu"
        >
          <span></span>

const toggleUserMenu = (e) => {
  e.stopPropagation(); // Prevent event bubbling
  setIsUserMenuOpen(!isUserMenuOpen);
  setIsVendorMenuOpen(false); // Close vendor menu when user menu is toggled
};

          <div className="navbar-auth-links">
            {isAuthenticated ? (
              <div className="user-menu-container">
                <button 
                  className="user-menu-button"
                  onClick={toggleUserMenu}
                  aria-expanded={isUserMenuOpen}
                >
                  <div className="user-avatar">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                      <path fillRule="evenodd" d="M18.685 19.097A9.723 9.723 0 0021.75 12c0-5.385-4.365-9.75-9.75-9.75S2.25 6.615 2.25 12a9.723 9.723 0 003.065 7.097A9.716 9.716 0 0012 21.75a9.716 9.716 0 006.685-2.653zm-12.54-1.285A7.486 7.486 0 0112 15a7.486 7.486 0 015.855 2.812A8.224 8.224 0 0112 20.25a8.224 8.224 0 01-5.855-2.438zM15.75 9a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <span className="user-name">{currentUser?.displayName || 'My Account'}</span>
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="dropdown-arrow">
                    <path fillRule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clipRule="evenodd" />
                  </svg>
                </button>
                <div className={`user-dropdown-menu ${isUserMenuOpen ? 'show' : ''}`}>
                  <Link to="/user/bookings" className={getLinkClass('/user/bookings')}>My Bookings</Link>
                  <Link to="/dashboard" className={getLinkClass('/dashboard')}>My Dashboard</Link>
                  {userRole === 'vendor' && (
                    <Link to="/vendor/dashboard" className={getLinkClass('/vendor/dashboard')}>Vendor Dashboard</Link>
                  )}
                  {userRole === 'admin' && (
                    <Link to="/admin/dashboard" className={getLinkClass('/admin/dashboard')}>Admin Panel</Link>
                  )}
                  <button onClick={handleLogoutClick} className="logout-button">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                      <polyline points="16 17 21 12 16 7"></polyline>
                      <line x1="21" y1="12" x2="9" y2="12"></line>
                    </svg>
                    Logout
                  </button>
                </div>
              </div>
            ) : (
              <>
                <Link to="/login" className="btn btn-outline">Login</Link>
                <Link to="/register" className="btn btn-primary">Register</Link>
                <div className="vendor-section" style={{ position: 'relative' }}>
                  <button 
                    className="vendor-dropdown-toggle" 
                    onClick={toggleVendorMenu}
                    onKeyDown={(e) => e.key === 'Enter' && toggleVendorMenu(e)}
                    aria-expanded={isVendorMenuOpen}
                    type="button"
                    aria-haspopup="true"
                    aria-controls="vendor-menu"
                  >
                    For Vendors
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="dropdown-arrow">
                      <path fillRule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clipRule="evenodd" />
                    </svg>
                  </button>
                  <div 
                    id="vendor-menu"
                    className={`vendor-dropdown-menu ${isVendorMenuOpen ? 'show' : ''}`}
                    role="menu"
                    aria-orientation="vertical"
                    aria-labelledby="vendor-menu-button"
                    tabIndex="-1"
                  >
                    <Link to="/vendor/login" role="menuitem" tabIndex="-1">Vendor Login</Link>
                    <Link to="/vendor/register" role="menuitem" tabIndex="-1">Vendor Registration</Link>
                    <Link to="/admin/login" role="menuitem" tabIndex="-1">Admin Login</Link>
                  </div>
                </div>
              </>
            )}
          </div>
          </div>
        </div>
      </nav>
      
      {/* Mobile Overlay - Click to close menu */}
      {isMenuOpen && (
        <div 
          className={`navbar-overlay ${isMenuOpen ? 'open' : ''}`}
          onClick={toggleMenu}
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
            zIndex: 900,
            opacity: 1,
            visibility: 'visible',
            transition: 'opacity 0.3s ease'
          }}
        ></div>
      )}
    </>
  );
}

export default Navbar;
